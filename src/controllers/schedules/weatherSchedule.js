import schedule from 'node-schedule';

import { errorMessages } from '@constants/text.js';
import { MAX_MINUTE, MIN_MINUTE, MINUTES_IN_HOUR } from '@constants/time.js';
import Subscriber from '@models/subscriberModel.js';
import getWeather from '@root/api/getWeather.js';

const weatherSchedule = async (bot) => {
  const rule = new schedule.RecurrenceRule();
  rule.tz = 'Europe/Moscow';
  rule.minute = new schedule.Range(MIN_MINUTE, MAX_MINUTE);

  schedule.scheduleJob(rule, () => {
    try {
      const currentDate = new Date();
      const timeInMinutes = currentDate.getHours() * MINUTES_IN_HOUR + currentDate.getMinutes();

      Subscriber.find({ callTime: { $eq: timeInMinutes } }).then(
        (subscribers) => {
          subscribers.forEach(async (subscriber) => {
            const { city } = subscriber;
            const data = await getWeather(city);

            bot.telegram.sendMessage(
              subscriber.chatID,
              `${data.name}: ${
                data.weather[0].description
              } üå§\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: ${(
                data.main.temp / 10
              ).toFixed(2)} ¬∞C\n\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ ${(
                data.main.feels_like / 10
              ).toFixed(2)} ¬∞C\n–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${(
                data.main.temp_min / 10
              ).toFixed(2)} ¬∞C\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ${(
                data.main.temp_max / 10
              ).toFixed(2)} ¬∞C\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: ${
                data.wind.speed
              } –º/c\n–í–∏–¥–∏–º–æ—Å—Ç—å: ${data.visibility} –º–µ—Ç—Ä–æ–≤`,
            );
          });
        },
      );
    } catch (err) {
      console.log(errorMessages.weatherForecast, err);
    }
  });
};

export default weatherSchedule;
