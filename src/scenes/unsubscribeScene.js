import { Scenes } from 'telegraf';

import isSubscribed from '@services/subscriber/isSubscribed.js';
import deleteSubscriber from '@services/subscriber/deleteSubscriber.js';

const unsubscribeScene = new Scenes.BaseScene('UNSUBSCRIBE_USER');

unsubscribeScene.enter(async (ctx) => {
  // Check if user is not subscribed
  if (!(await isSubscribed(ctx.message.chat.id))) {
    ctx.reply(
      '–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ\n–ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscribe',
    );
    ctx.scene.leave();
  } else {
    ctx.reply(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è?`, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è', callback_data: 'unsubscribe' },
            { text: '–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: 'cancel' },
          ],
        ],
      },
    });
  }
});

unsubscribeScene.action('unsubscribe', async (ctx) => {
  ctx.editMessageReplyMarkup();

  const deletedObj = await deleteSubscriber(ctx.update.callback_query.from.id);
  ctx.reply(`üåë –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É ${deletedObj.city} –æ—Ç–º–µ–Ω–µ–Ω–∞ üåë`);
  ctx.scene.leave();
});

unsubscribeScene.action('cancel', (ctx) => {
  ctx.editMessageReplyMarkup();
  
  ctx.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞—Ç –ø–æ—Å—Ç—É–ø–∞—Ç—å');
  ctx.scene.leave();
});

export default unsubscribeScene;
