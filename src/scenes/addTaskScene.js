import { Scenes } from 'telegraf';

import addTask from '../services/task/addTask.js';
import { dateRegex } from '../constants/regex.js';

const addTaskScene = new Scenes.WizardScene(
  'ADD_TASK',
  (ctx) => {
    ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ üìù', {
      reply_markup: {
        inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ ‚ùå', callback_data: 'cancel' }]],
      },
    });
    ctx.scene.session.task = {};

    return ctx.wizard.next();
  },
  (ctx) => {
    const message = ctx.update.message.text;
    // Check if message is more than 2 symbols long
    if (message.length < 2) {
      return ctx.reply('‚õîÔ∏è –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞! ‚õîÔ∏è');
    }

    ctx.scene.session.task.text = message;
    ctx.reply(
      // 'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üìÖ\n(–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º)\n\n–ë–æ—Ç –∂–∏–≤—ë—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT-3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
      'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ üìÖ\n(–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º)\n\n–ë–æ—Ç –∂–∏–≤—ë—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT-3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
    );
    return ctx.wizard.next();
  },
  (ctx) => {
    const inputDate = ctx.update.message.text;

    // Check if date is in the correct form
    if (!dateRegex.test(inputDate)) {
      return ctx.reply('‚õîÔ∏è –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚õîÔ∏è');
    }
    // Check if date is not from the past
    const [day, month, year, hours, minutes] = inputDate.match(/\d+/g);
    const inputDateObject = new Date(year, month - 1, day, hours, minutes);
    const currentDate = new Date();
    if (currentDate > inputDateObject) {
      return ctx.reply(
        '–ú–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É‚è≥',
      );
    }

    // Adding tasks date
    ctx.scene.session.task.date = inputDateObject;

    ctx.reply(`–•–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ?`, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–î–∞', callback_data: 'yes' },
            { text: '–ù–µ—Ç', callback_data: 'no' },
          ],
        ],
        resize_keyboard: true,
      },
    });
    return ctx.wizard.next();
  },
  (ctx) => {
    const agreement = ctx.callbackQuery.data;

    // If user don't need a reminder
    if (agreement === 'no') {
      // Adding task to the DB
      addTask(
        ctx.update.callback_query.from.id,
        ctx.scene.session.task.text,
        ctx.scene.session.task.date,
      );
      ctx.reply(`üëåüèª –û—Ç–ª–∏—á–Ω–æ, –∑–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! üëåüèª\n`);
      return ctx.scene.leave();
    }

    ctx.reply(
      'üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è üìÖ\n(–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º)\n\n–ë–æ—Ç –∂–∏–≤—ë—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT-3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
    );
    return ctx.wizard.next();
  },
  (ctx) => {
    const inputDate = ctx.update.message.text;
    // Check if date is in the correct form
    if (!dateRegex.test(inputDate)) {
      return ctx.reply('‚õîÔ∏è –í–≤–µ–¥–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚õîÔ∏è');
    }
    // Check if date is not from the past
    const [day, month, year, hours, minutes] = inputDate.match(/\d+/g);
    const inputDateObject = new Date(year, month - 1, day, hours, minutes);
    const currentDate = new Date();
    if (currentDate > inputDateObject) {
      return ctx.reply(
        '–ú–æ–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—à–ª–æ–µ\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É‚è≥',
      );
    }

    // Adding task to the DB
    addTask(
      ctx.update.message.from.id,
      ctx.scene.session.task.text,
      ctx.scene.session.task.date,
      inputDateObject,
    );
    ctx.reply(`üëåüèª –û—Ç–ª–∏—á–Ω–æ, –∑–∞–¥–∞—á–∞ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã! üëåüèª\n`);
    return ctx.scene.leave();
  },
);

addTaskScene.action('cancel', (ctx) => {
  ctx.editMessageReplyMarkup();

  ctx.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ\n');
  ctx.scene.leave();
});

export default addTaskScene;
