import { Scenes } from 'telegraf';

import getTodaysTasks from '../services/task/getTodaysTasks.js';
import getAllTasks from '../services/task/getAllTasks.js';

import dateFormatting from '../utils/dateFormatting.js';

const tasksScene = new Scenes.BaseScene('TASKS_SERVICE');

tasksScene.enter((ctx) => {
  ctx.reply('–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å? ü´°', {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–í—ã–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–¥–∞—á–∏ üõí', callback_data: 'showAll' }],
        [
          { text: '–í—ã–≤–µ—Å—Ç–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üíª', callback_data: 'showTodays' },
          { text: '–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É üìù', callback_data: 'addTask' },
        ],
      ],
      resize_keyboard: true,
    },
  });
});

tasksScene.action('addTask', (ctx) => {
  ctx.scene.enter('ADD_TASK');
  ctx.scene.leave();
});

tasksScene.action('showAll', async (ctx) => {
  try {
    const data = await getAllTasks();

    // Check if there are no tasks
    if (data.length === 0) {
      ctx.reply('–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á üö®');
      return ctx.scene.leave();
    }

    const formattedData = data.reduce(
      (acc, task) => (acc += `üìù ${task.text}\nüïê ${dateFormatting(task.date)}\n\n`),
      '–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n',
    );

    ctx.reply(formattedData);
    ctx.scene.leave();
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á', error);
    ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ');
    ctx.scene.leave();
  }
  ctx.scene.leave();
});

tasksScene.action('showTodays', async (ctx) => {
  try {
    const data = await getTodaysTasks();

    // Check if there are no tasks
    if (data.length === 0) {
      ctx.reply('–í–∞—à —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—É—Å—Ç üö®');
      return ctx.scene.leave();
    }

    const formattedData = data.reduce(
      (acc, task) => (acc += `üìù ${task.text}\nüïê ${dateFormatting(task.date)}\n\n`),
      '–í–∞—à–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n',
    );

    ctx.reply(formattedData);
    ctx.scene.leave();
  } catch (error) {
    console.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', error);
    ctx.reply('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ üòî\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ');
    ctx.scene.leave();
  }
});

export default tasksScene;
