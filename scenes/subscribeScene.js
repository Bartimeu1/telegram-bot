import { Scenes } from 'telegraf';

import { timeRegex } from '../config/consts.js';
import addSubscriber from '../services/subscriber/addSubscriber.js';
import isSubscribed from '../services/subscriber/isSubscribed.js';
import getWeather from '../services/api/getWeather.js';

const subscribeScene = new Scenes.WizardScene(
  'SUBSCRIBE_USER',
  async (ctx) => {
    // Check if user is already subscribed
    if (await isSubscribed(ctx.message.chat.id)) {
      ctx.reply('–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã!\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –≤–≤–µ–¥–∏—Ç–µ /unsubscribe');
      ctx.scene.leave();
    } else {
      ctx.reply(
        `–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–≥–æ–¥–µ üåÜ`,
        {
          reply_markup: {
            inline_keyboard: [[{ text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É ‚ùå', callback_data: 'cancel' }]],
          },
        },
      );
    }
    ctx.scene.session.subscriber = {};

    return ctx.wizard.next();
  },
  async (ctx) => {
    const city = ctx.update.message.text;

    // Check if city existing
    const data = await getWeather(city);
    if (!data) {
      ctx.reply('–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥ üòî\n–í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π');
    }

    ctx.scene.session.subscriber.city = city;
    ctx.reply(
      'üìÖ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π üìÖ\n(–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º)\n\n–ë–æ—Ç –∂–∏–≤—ë—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT-3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
    );
    return ctx.wizard.next();
  },
  (ctx) => {
    const inputTime = ctx.update.message.text;

    // Check if time is in the correct form
    if (!timeRegex.test(inputTime)) {
      return ctx.reply('‚õîÔ∏è –í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚õîÔ∏è');
    }

    // Calculating time in minutes
    const [hours, minutes] = inputTime.split(':');
    const timeInMinutes = parseInt(hours) * 60 + parseInt(minutes);

    // Adding subscriber to the DB
    addSubscriber(ctx.message.from.id, ctx.scene.session.subscriber.city, timeInMinutes);
    ctx.reply(
      `–û—Ç–ª–∏—á–Ω–æ, –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! üëåüèª\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –≤–≤–µ–¥–∏—Ç–µ /unsubscribe`,
    );
    return ctx.scene.leave();
  },
);

subscribeScene.action('cancel', (ctx) => {
  ctx.editMessageReplyMarkup();

  ctx.reply('–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ\n');
  ctx.scene.leave();
});

export default subscribeScene;
